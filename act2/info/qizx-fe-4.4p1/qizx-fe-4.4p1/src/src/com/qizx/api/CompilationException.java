/*
 *    Qizx Free_Engine-4.4p1
 *
 *    This code is part of Qizx XQuery engine
 *    Copyright (c) 2004-2010 Axyana Software -- All rights reserved.
 *
 *    For conditions of use, see the accompanying license files.
 */
package com.qizx.api;

import com.qizx.util.NamespaceContext;
import com.qizx.xdm.IQName;
import com.qizx.xquery.MainQuery;

/**
 * Thrown at the end of the compilation of an Expression if there are errors.
 * <p>
 * Carries one or several messages (error, warning or detail).
 */
public class CompilationException extends QizxException
{
    private static final QName DEFAULT_CODE =
        IQName.get(NamespaceContext.ERR, "XPST0003");
    
    private Message[] messages;
    public MainQuery query; // parsed expression if possible
    
    /**
     * For internal use.
     */
    public CompilationException(String reason)
    {
        super(reason);
        setErrorCode(DEFAULT_CODE);
    }

    /**
     * Returns a list of compilation error or warning Messages.
     * @return a non-null array of Message objects generated by a compilation
     */
    public Message[] getMessages()
    {
        return messages;
    }

    /**
     * For internal use.
     * @param messages array of associated Message objects 
     */
    public void setMessages(Message[] messages)
    {
        this.messages = messages;
    }
    
    /**
     * Returns the number of actual errors.
     * @return an int representing the error count value
     */
    public int getErrorCount()
    {
        int count = 0;
        for (int i = 0; i < messages.length; i++) {
            if(messages[i].getType() == Message.ERROR)
                ++ count;            
        }
        return count;
    }
}
